import re
import hashlib
import codecs
import sys

if sys.version_info.major == 2:
    input = raw_input

def analyzeEML():
    # extracts data from EML and stores each item as a separate variable
    path_to_eml = input("Drag and drop EML file to get path and press ENTER!\nMake sure the file is in quotes ('') and there is no space at the end!!!\n")[1:-1]
    eml = open(path_to_eml, "r").read()
    app_river_check1 = re.findall("AppRiver", eml)
    #app_river_check2 = re.findall("8.31.233.164", eml)
    while not app_river_check1:
        from_eml = re.findall("From: (.*?)\n", eml)
        from_eml_str =''.join(map(str,from_eml))
        to_eml = re.findall("\sTo: (.*?)\n", eml)
        to_eml_str =''.join(map(str,to_eml))
        subject_eml = re.findall("Subject: (.*?)\n", eml)
        subject_eml_str =''.join(map(str,subject_eml))
    # could not get or function in regex to work so made two and whichever is longer (the variable with actual data in it) will be stored in a new variable
        return_path_eml_short = re.findall("\sReturn-Path: (.*?)\n",eml)
        return_path_eml_short_str =''.join(map(str,return_path_eml_short))
        return_path_eml_under = re.findall("\sReturn-Path:\s(.*?)\n", eml)
        return_path_eml_under_str =''.join(map(str,return_path_eml_under))
        if len(return_path_eml_short) > 2:
            correct_return_path = return_path_eml_short_str
        else:
            correct_return_path = return_path_eml_under_str
        sender_ip = re.findall("sender IP is (.*?)\)", eml)
        sender_ip_str =''.join(map(str,sender_ip))
        spf = re.findall("spf=(.*?)\s", eml)
        spf_str =''.join(map(str,spf))
        dkim = re.findall("dkim=(.*?)\s", eml)
        dkim_str =''.join(map(str,dkim))
        dmarc = re.findall("dmarc=(.*?)\s", eml)
        dmarc_str =''.join(map(str,dmarc))
    else:
        # redscooter option
        from_eml = re.findall("\sFrom: (.*?)\n", eml)
        from_eml_str =''.join(map(str,from_eml))
        to_eml = re.findall("\sTo: (.*?)\n", eml)
        to_eml_str =''.join(map(str,to_eml))
        subject_eml = re.findall("Subject: (.*?)\n", eml)
        subject_eml_str =''.join(map(str,subject_eml))
    ## could not get or function in regex to work so made two and whichever is longer (the variable with actual data in it) will be stored in a new variable
        return_path_eml_short = re.findall("\sReturn-Path: (.*?)\n",eml)
        return_path_eml_short_str =''.join(map(str,return_path_eml_short))
        return_path_eml_under = re.findall("\sReturn-Path:\s(.*?)\n", eml)
        return_path_eml_under_str =''.join(map(str,return_path_eml_under))
        if len(return_path_eml_short) > 2:
            correct_return_path = return_path_eml_short_str
        else:
            correct_return_path = return_path_eml_under_str
        sender_ip = re.findall(r"X-Note: SPF: IP: (\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}) ", eml)
        sender_ip_str =''.join(map(str,sender_ip))
        spf = re.findall("X-Note: SPF: (\w*?)\s", eml)
        spf_str =''.join(map(str,spf))
        dkim = re.findall("X-Note: DKIM: (.*?):", eml)
        dkim_str =''.join(map(str,dkim))
        if dkim_str == "Pass":
            dkim_str == "Pass"
        else:
            dkim_str == "Not Listed"
        dmarc = re.findall("X-Note: DMARC: (Pass)\s", eml)
        dmarc_str =''.join(map(str,dmarc))
        if dmarc_str == "Pass":
            dmarc_str = "Pass"
        else:
            dmarc_str = "Not Listed"
# URLs are discovered by the originalsrc since those are already decoded and I did not have to deal with non href URLs that belong to an image or something
    urls = re.findall('originalsrc=3D\"(.+?)\"', eml, re.DOTALL)
    fixed_urls = []
    for each_url in urls:
        each_url_fixed =  each_url.replace('=\n','')
        fixed_urls.append(each_url_fixed)
    base_domains = []
    for each_base_domain in fixed_urls:
        each_base_domain_fixed = re.findall("https?://(.*?)/", each_base_domain)
        base_domains.append(each_base_domain_fixed)
    file_name = re.findall("filename(.*?)Content-Transfer", eml, re.DOTALL)
    file_name_str =''.join(map(str,file_name))
    #file_64 = re.findall("Encoding: base64\s*?(\S*?)\s", eml, re.DOTALL)
    #file_64_str =''.join(map(str,file_64))
    #file_64_encode = codecs.encode(file_64_str)
    #file_64_hash = hashlib.sha256(file_64_encode).hexdigest()
    # makes a local file with the notes AND also outputs it to the screen
    filehandle = open('emlnotes.txt', 'w')
    filehandle.write("## Email Workflow\n--------\n```\n* From: {0}\n* To: {1}\n* Subject: {2}\n* Return Path: {3}\n* Sender IP: {4}\n* SPF/DKIM/DMARC: {5}/{6}/{7}\n```\n--------\n### Full URL(s)\n```\n* {8}\n```\n--------\n### Base Domains\n```\n* {9}\n```\n--------\n### Attachment(s)\n\n* File Name: {10}\n* File Hash (SHA-256): \n\n--------\n### Email Gist\n\n*\n\n--------\n### Summary\n\n* User reported email\n* Email is\n* Customer notification sent\n* No further action required".format(from_eml_str, to_eml_str, subject_eml_str, correct_return_path, sender_ip_str, spf_str, dkim_str, dmarc_str, fixed_urls, base_domains, file_name_str))
    filehandle2 = open('emlnotes.txt', 'a')
    return print("## Email Workflow\n--------\n```\n* From: {0}\n* To: {1}\n* Subject: {2}\n* Return Path: {3}\n* Sender IP: {4}\n* SPF/DKIM/DMARC: {5}/{6}/{7}\n```\n--------\n### Full URL(s)\n```\n* {8}\n```\n--------\n### Base Domains\n```\n* {9}\n```\n--------\n### Attachment(s)\n\n* File Name: {10}\n* File Hash (SHA-256): \n\n--------\n### Email Gist\n\n*\n\n--------\n### Summary\n\n* User reported email\n* Email is\n* Customer notification sent\n* No further action required".format(from_eml_str, to_eml_str, subject_eml_str, correct_return_path, sender_ip_str, spf_str, dkim_str, dmarc_str, fixed_urls, base_domains, file_name_str))


def main():
    analyzeEML()

if __name__=="__main__":
    main()
